{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nvar _isSchema = _interopRequireDefault(require(\"./util/isSchema\"));\nvar Lazy = /*#__PURE__*/\nfunction () {\n  function Lazy(mapFn) {\n    this._resolve = function (value, options) {\n      var schema = mapFn(value, options);\n      if (!(0, _isSchema.default)(schema)) throw new TypeError('lazy() functions must return a valid schema');\n      return schema.resolve(options);\n    };\n  }\n  var _proto = Lazy.prototype;\n  _proto.resolve = function resolve(options) {\n    return this._resolve(options.value, options);\n  };\n  _proto.cast = function cast(value, options) {\n    return this._resolve(value, options).cast(value, options);\n  };\n  _proto.validate = function validate(value, options) {\n    return this._resolve(value, options).validate(value, options);\n  };\n  _proto.validateSync = function validateSync(value, options) {\n    return this._resolve(value, options).validateSync(value, options);\n  };\n  _proto.validateAt = function validateAt(path, value, options) {\n    return this._resolve(value, options).validateAt(path, value, options);\n  };\n  _proto.validateSyncAt = function validateSyncAt(path, value, options) {\n    return this._resolve(value, options).validateSyncAt(path, value, options);\n  };\n  return Lazy;\n}();\nLazy.prototype.__isYupSchema__ = true;\nvar _default = Lazy;\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}